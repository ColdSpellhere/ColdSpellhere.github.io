<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ColdSpell's Blog</title><link>https://ColdSpellhere.github.io</link><description>Contact Email: coldspell060319@gmail.com&lt;br&gt;欢迎来&lt;a href='https://oopz.cn/i/alNZp4/' target='_blank' rel='noopener' style='color: inherit;'&gt;我的OOPZ频道&lt;/a&gt;聊聊天</description><copyright>ColdSpell's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/207527992?v=4</url><title>avatar</title><link>https://ColdSpellhere.github.io</link></image><lastBuildDate>Fri, 05 Sep 2025 06:50:43 +0000</lastBuildDate><managingEditor>ColdSpell's Blog</managingEditor><ttl>60</ttl><webMaster>ColdSpell's Blog</webMaster><item><title>DataScience Glossary Flowchart</title><link>https://ColdSpellhere.github.io/post/4.html</link><description>Notice：从Blog进入可能无法正常显示流程图，可以跳转Github或者在评论区查看，本人正在积极解决该问题
##### Chinese Version
```mermaid
flowchart TD
    A[数据源&lt;br&gt;业务系统、IoT、日志等] --&gt;|原始数据流入| B[数据池 ]

    subgraph Governance [数据治理 ]
        G[政策/标准/质量/安全&lt;br&gt;贯穿全流程]
    end

    B -- 数据管道 Data Pipeline --&gt; C{数据集成&lt;br&gt;}
    C -- 抽取、清洗、转换&lt;br&gt;（ETL/ELT） --&gt; B
    C -- 组织、加工 --&gt; D[数据集市 ]

    D --&gt; E[最终用户&lt;br&gt;BI、分析、应用]
    B --&gt; F[数据科学家&lt;br&gt;探索性分析]

    G -.-&gt;|监管与规范| A
    G -.-&gt;|监管与规范| B
    G -.-&gt;|监管与规范| C
    G -.-&gt;|监管与规范| D
```
##### English Version
```mermaid
flowchart TD
    A[Data Sources&lt;br&gt;Business Apps, IoT, Logs] --&gt;|Raw Data Ingest| B[Data Lake]

    subgraph Governance [Data Governance&lt;br&gt;Governs Entire Process]
        G[Policies/Standards/Quality/Security]
    end

    B -- Data Pipeline --&gt; C{Data Integration}
    C -- Extract, Clean, Transform&lt;br&gt;（ETL/ELT） --&gt; B
    C -- Organize, Process --&gt; D[Data Mart]

    D --&gt; E[End Users&lt;br&gt;BI, Analytics, Apps]
    B --&gt; F[Data Scientists&lt;br&gt;Exploratory Analysis]

    G -.-&gt;|Governs &amp; Standards| A
    G -.-&gt;|Governs &amp; Standards| B
    G -.-&gt;|Governs &amp; Standards| C
    G -.-&gt;|Governs &amp; Standards| D
```。</description><guid isPermaLink="true">https://ColdSpellhere.github.io/post/4.html</guid><pubDate>Fri, 05 Sep 2025 06:36:08 +0000</pubDate></item><item><title>Numpy习题笔记</title><link>https://ColdSpellhere.github.io/post/3.html</link><description># 1.归一化，标准化
![Compare](https://i-blog.csdnimg.cn/blog_migrate/6aec0785b4affc9a049f8b7b796c9915.png)
## 归一化
```Python
Z = np.random.random((5,5))
print(Z)
print('\n')
Z_scale = (Z - np.min(Z)) / np.ptp(Z)) 
#最值归一化（MinMaxScaler） (np.ptp(Z))=(np.max(Z) - np.min(Z)
print(Z_scale)

```
###### 归一化运行结果例
```
[[0.46364375 0.78548223 0.72442223 0.68663041 0.68110256] [0.70568273 0.07519275 0.958697 0.2028082 0.41866144] [0.56644737 0.84278929 0.89113894 0.48064408 0.28365119] [0.48338433 0.58233878 0.59077714 0.4637845 0.5200544 ] [0.54851656 0.31392362 0.75729952 0.95367168 0.18563437]]

[[0.46364375 0.78548223 0.72442223 0.68663041 0.68110256] [0.70568273 0.07519275 0.958697 0.2028082 0.41866144] [0.56644737 0.84278929 0.89113894 0.48064408 0.28365119] [0.48338433 0.58233878 0.59077714 0.4637845 0.5200544 ] [0.54851656 0.31392362 0.75729952 0.95367168 0.18563437]]
```

## 标准化
```Python
Z = np.random.random((5,5))
print(Z)
print('\n')
Z = (Z - np.mean (Z)) / (np.std (Z))
print(Z)
```
###### 标准化运行结果例
```
[[0.73568395 0.04015236 0.48692444 0.37883354 0.93524418] [0.41309095 0.96252619 0.79763891 0.59653225 0.18358172] [0.86417374 0.71764583 0.80689974 0.74152617 0.79441388] [0.39287178 0.73110138 0.04942272 0.28836453 0.42616441] [0.92920924 0.38905728 0.38568728 0.82678806 0.97061093]]

[[ 0.50864319 -1.98418417 -0.38292598 -0.7703303 1.22387913] [-0.64754967 1.32165952 0.73069352 0.00991505 -1.47012468] [ 0.96915839 0.44399346 0.76388488 0.52958206 0.71913483] [-0.7200164 0.49221897 -1.95095864 -1.09457672 -0.60069361] [ 1.20224957 -0.73368781 -0.74576609 0.83516582 1.3506357 ]]
```

## 2.考虑一个可以描述10个三角形的triplets，找到可以分割全部三角形的line segment
![Triplets](https://i-blog.csdnimg.cn/blog_migrate/acff52c2510d4e635c72c3fa1ff4aaa7.png)

## 3.截取中心区域
```Python
import numpy as np

def extract_centered_subarray(

    array: np.ndarray,

    shape: tuple,

    center: tuple,

    fill: float = 0,

    padding_mode: str = 'constant'

) -&gt; np.ndarray:

    # 参数校验

    if len(shape) != array.ndim:

        raise ValueError(f'shape维度 {len(shape)} 必须与输入数组维度 {array.ndim} 相同')

    if len(center) != array.ndim:

        raise ValueError(f'center维度 {len(center)} 必须与输入数组维度 {array.ndim} 相同')

    # 计算理论范围

    shape_arr = np.array(shape)

    center_arr = np.array(center)

    half_shape = shape_arr // 2

    start = center_arr - half_shape

    stop = center_arr + half_shape + (shape_arr % 2)  # 处理奇数形状

    # 处理边界

    array_shape = np.array(array.shape)

    start_corrected = np.maximum(start, 0)

    stop_corrected = np.minimum(stop, array_shape)

    # 计算填充区域

    pad_before = np.maximum(-start, 0)

    pad_after = np.maximum(stop - array_shape, 0)

    padding = list(zip(pad_before, pad_after))

    # 提取有效区域

    slices = tuple(slice(s, e) for s, e in zip(start_corrected, stop_corrected))

    valid_region = array[slices]

    # 根据填充模式处理

    if padding_mode == 'edge':

        # 边缘值填充

        pad_width = [(int(p[0]), int(p[1])) for p in padding]

        return np.pad(valid_region, pad_width, mode='edge')

    else:

        # 固定值填充

        result = np.full(shape, fill, dtype=array.dtype)

        insert_slices = tuple(slice(p[0], p[0] + stop_corrected[i] - start_corrected[i]) for i, p in enumerate(padding))

        result[insert_slices] = valid_region

        return result

# ------------------------- 示例用法 -------------------------
if __name__ == '__main__':
    # 示例1：2D数组中心提取
    Z = np.arange(25).reshape(5,5)
    print('原始数组:\n', Z)
    print('\n中心(1,1)的3x3子数组:\n', extract_centered_subarray(Z, (3,3), (1,1)))

    # 示例2：边界填充
    print('\n中心(0,0)的3x3子数组（自动填充）:\n', 
          extract_centered_subarray(Z, (3,3), (0,0), fill=-1))

    # 示例3：边缘值填充模式
    print('\n边缘填充模式:\n', 
          extract_centered_subarray(Z, (3,3), (0,0), padding_mode='edge'))
```
###### 从数组中提取以指定位置为中心的固定形状子数组，自动处理边界填充。</description><guid isPermaLink="true">https://ColdSpellhere.github.io/post/3.html</guid><pubDate>Sat, 23 Aug 2025 21:57:48 +0000</pubDate></item><item><title>什么是CC协议（知识共享许可协议）</title><link>https://ColdSpellhere.github.io/post/2.html</link><description>### 什么是CC协议？
知识共享许可协议（Creative Commons license），又名CC协议，是一种允许他人分发作品的公共版权许可。</description><guid isPermaLink="true">https://ColdSpellhere.github.io/post/2.html</guid><pubDate>Thu, 21 Aug 2025 21:51:34 +0000</pubDate></item><item><title>This is a test page</title><link>https://ColdSpellhere.github.io/post/1.html</link><description>into a new world。</description><guid isPermaLink="true">https://ColdSpellhere.github.io/post/1.html</guid><pubDate>Thu, 21 Aug 2025 20:45:02 +0000</pubDate></item></channel></rss>